import Lean
import Mathlib
import Auto.Translation
import Auto.Solver.SMT
import Auto.Solver.TPTP
import Auto.Solver.Native
import Auto.LemDB
open Lean Elab Tactic

initialize
  registerTraceClass `auto.tactic
  registerTraceClass `auto.tactic.printProof
  registerTraceClass `auto.printLemmas
  registerTraceClass `auto.runAuto.printLemmas

namespace Auto

/-- `*` : LCtxHyps, `* <ident>` : Lemma database -/
syntax hintelem := term <|> "*" (ident)?
syntax hints := ("[" hintelem,* "]")?
/-- Specify constants to unfold. `unfolds` Must not contain cyclic dependency -/
syntax unfolds := "u[" ident,* "]"
/-- Specify constants to collect definitional equality for -/
syntax defeqs := "d[" ident,* "]"
syntax uord := atomic(unfolds) <|> defeqs
syntax autoinstr := ("üëç" <|> "üëé")?
syntax (name := auto) "auto" autoinstr hints (uord)* : tactic
syntax (name := egg) "egg" autoinstr hints (uord)* : tactic
syntax (name := goeland) "goeland" autoinstr hints (uord)* : tactic
syntax (name := mononative) "mononative" hints (uord)* : tactic
syntax (name := intromono) "intromono" hints (uord)* : tactic

inductive Instruction where
  | none
  | useSorry

def parseInstr : TSyntax ``autoinstr ‚Üí TacticM Instruction
| `(autoinstr|) => return .none
| `(autoinstr|üëç) => throwError "Your flattery is appreciated üòé"
| `(autoinstr|üëé) => do
  logInfo "I'm terribly sorry. A 'sorry' is sent to you as compensation."
  return .useSorry
| _ => throwUnsupportedSyntax

inductive HintElem where
  -- A user-provided term
  | term     : Term ‚Üí HintElem
  -- Hint database, not yet supported
  | lemdb    : Name ‚Üí HintElem
  -- `*` adds all hypotheses in the local context
  -- Also, if `[..]` is not supplied to `auto`, all
  --   hypotheses in the local context are
  --   automatically collected.
  | lctxhyps : HintElem
deriving Inhabited, BEq

def parseHintElem : TSyntax ``hintelem ‚Üí TacticM HintElem
| `(hintelem| *) => return .lctxhyps
| `(hintelem| * $id:ident) => return .lemdb id.getId
| `(hintelem| $t:term) => return .term t
| _ => throwUnsupportedSyntax

structure InputHints where
  terms    : Array Term := #[]
  lemdbs   : Array Name := #[]
  lctxhyps : Bool       := false
deriving Inhabited, BEq

/-- Parse `hints` to an array of `Term`, which is still syntax -/
def parseHints : TSyntax ``hints ‚Üí TacticM InputHints
| `(hints| [ $[$hs],* ]) => do
  let mut terms := #[]
  let mut lemdbs := #[]
  let mut lctxhyps := false
  let elems ‚Üê hs.mapM parseHintElem
  for elem in elems do
    match elem with
    | .term t => terms := terms.push t
    | .lemdb db => lemdbs := lemdbs.push db
    | .lctxhyps => lctxhyps := true
  return ‚ü®terms, lemdbs, lctxhyps‚ü©
| `(hints| ) => return ‚ü®#[], #[], true‚ü©
| _ => throwUnsupportedSyntax

private def defeqUnfoldErrHint :=
  "Note that auto does not accept defeq/unfold hints which" ++
  "are let-declarations in the local context, because " ++
  "let-declarations are automatically unfolded by auto."

def parseUnfolds : TSyntax ``unfolds ‚Üí TacticM (Array Prep.ConstUnfoldInfo)
| `(unfolds| u[ $[$hs],* ]) => do
  let exprs ‚Üê hs.mapM (fun i => do
    let some expr ‚Üê Term.resolveId? i
      | throwError "{decl_name%} :: Unknown identifier {i}. {defeqUnfoldErrHint}"
    return expr)
  exprs.mapM (fun expr => do
    let some name := expr.constName?
      | throwError "{decl_name%} :: Unknown declaration {expr}. {defeqUnfoldErrHint}"
    Prep.getConstUnfoldInfo name)
| _ => throwUnsupportedSyntax

def parseDefeqs : TSyntax ``defeqs ‚Üí TacticM (Array Name)
| `(defeqs| d[ $[$hs],* ]) => do
  let exprs ‚Üê hs.mapM (fun i => do
    let some expr ‚Üê Term.resolveId? i
      | throwError "{decl_name%} :: Unknown identifier {i}. {defeqUnfoldErrHint}"
    return expr)
  exprs.mapM (fun expr => do
    let some name := expr.constName?
      | throwError "{decl_name%} :: Unknown declaration {expr}. {defeqUnfoldErrHint}"
    return name)
| _ => throwUnsupportedSyntax

def parseUOrD : TSyntax ``uord ‚Üí TacticM (Array Prep.ConstUnfoldInfo ‚äï Array Name)
| `(uord| $unfolds:unfolds) => Sum.inl <$> parseUnfolds unfolds
| `(uord| $defeqs:defeqs) => Sum.inr <$> parseDefeqs defeqs
| _ => throwUnsupportedSyntax

def parseUOrDs (stxs : Array (TSyntax ``uord)) : TacticM (Array Prep.ConstUnfoldInfo √ó Array Name) := do
  let mut hasUnfolds := false
  let mut hasDefeqs := false
  let mut unfolds := #[]
  let mut defeqs := #[]
  for stx in stxs do
    match ‚Üê parseUOrD stx with
    | .inl u =>
      if hasUnfolds then
        throwError "{decl_name%} :: Duplicated unfold hint"
      hasUnfolds := true
      unfolds := u
    | .inr d =>
      if hasDefeqs then
        throwError "{decl_name%} :: Duplicated defeq hint"
      hasDefeqs := true
      defeqs := defeqs.append d
  return (unfolds, defeqs)

def collectLctxLemmas (lctxhyps : Bool) (ngoalAndBinders : Array FVarId) : MetaM (Array Lemma) :=
  Meta.withNewMCtxDepth do
    let fVarIds ‚Üê if lctxhyps then pure (‚Üê getLCtx).getFVarIds else pure ngoalAndBinders
    let mut lemmas := #[]
    for fVarId in fVarIds do
      let decl ‚Üê FVarId.getDecl fVarId
      let type ‚Üê instantiateMVars decl.type
      if ‚Üê Prep.isNonemptyInhabited type then
        continue
      if ¬¨ decl.isAuxDecl ‚àß (‚Üê Meta.isProp type) then
        let name ‚Üê fVarId.getUserName
        lemmas := lemmas.push ‚ü®‚ü®mkFVar fVarId, type, .leaf s!"lctxLem {name}"‚ü©, #[]‚ü©
    return lemmas

def collectUserLemmas (terms : Array Term) : TacticM (Array Lemma) :=
  Meta.withNewMCtxDepth do
    let mut lemmas := #[]
    for term in terms do
      let ‚ü®‚ü®proof, type, deriv‚ü©, params‚ü© ‚Üê Prep.elabLemma term (.leaf s!"‚ù∞{term}‚ù±")
      if ‚Üê Prep.isNonemptyInhabited type then
        throwError "invalid lemma {type}, lemmas should not be inhabitation facts"
      else if ‚Üê Meta.isProp type then
        lemmas := lemmas.push ‚ü®‚ü®proof, ‚Üê instantiateMVars type, deriv‚ü©, params‚ü©
      else
        -- **TODO**: Relax condition?
        throwError "invalid lemma {type} for auto, proposition expected"
    return lemmas

def collectHintDBLemmas (names : Array Name) : TacticM (Array Lemma) := do
  let mut hs : Std.HashSet Name := Std.HashSet.empty
  let mut ret : Array Lemma := #[]
  for name in names do
    let .some db ‚Üê findLemDB name
      | throwError "unknown lemma database {name}"
    let lemNames ‚Üê db.toHashSet
    for lname in lemNames do
      if !hs.contains lname then
        hs := hs.insert lname
        ret := ret.push (‚Üê Lemma.ofConst lname (.leaf s!"lemdb {name} {lname}"))
  return ret

def collectDefeqLemmas (names : Array Name) : TacticM (Array Lemma) :=
  Meta.withNewMCtxDepth do
    let lemmas ‚Üê names.flatMapM Prep.elabDefEq
    lemmas.mapM (fun (‚ü®‚ü®proof, type, deriv‚ü©, params‚ü© : Lemma) => do
      let type ‚Üê instantiateMVars type
      return ‚ü®‚ü®proof, type, deriv‚ü©, params‚ü©)

def unfoldConstAndPreprocessLemma (unfolds : Array Prep.ConstUnfoldInfo) (lem : Lemma) : MetaM Lemma := do
  let type ‚Üê prepReduceExpr (‚Üê instantiateMVars lem.type)
  let type := Prep.unfoldConsts unfolds type
  let type ‚Üê Core.betaReduce (‚Üê instantiateMVars type)
  let lem := {lem with type := type}
  return lem

/--
  We assume that all defeq facts have the form
    `‚àÄ (x‚ÇÅ : ‚ãØ) ‚ãØ (x‚Çô : ‚ãØ), c ... = ...`
  where `c` is a constant. To avoid `whnf` from reducing
  `c`, we call `forallTelescope`, then call `prepReduceExpr`
  on
  ¬∑ All the arguments of `c`, and
  ¬∑ The right-hand side of the equation
-/
def unfoldConstAndprepReduceDefeq (unfolds : Array Prep.ConstUnfoldInfo) (lem : Lemma) : MetaM Lemma := do
  let .some type ‚Üê prepReduceDefeq (‚Üê instantiateMVars lem.type)
    | throwError "unfoldConstAndprepReduceDefeq :: Unrecognized definitional equation {lem.type}"
  let type := Prep.unfoldConsts unfolds type
  let type ‚Üê Core.betaReduce (‚Üê instantiateMVars type)
  let lem := {lem with type := type}
  return lem

def traceLemmas (traceClass : Name) (pre : String) (lemmas : Array Lemma) : CoreM Unit := do
  let mut cnt : Nat := 0
  let mut mdatas : Array MessageData := #[]
  for lem in lemmas do
    mdatas := mdatas.push m!"\n{cnt}: {lem}"
    cnt := cnt + 1
  if ‚Üê isTracingEnabledFor traceClass then
    addTrace traceClass (mdatas.foldl MessageData.compose pre)

def checkDuplicatedFact (terms : Array Term) : TacticM Unit :=
  let n := terms.size
  for i in [0:n] do
    for j in [i+1:n] do
      if terms[i]? == terms[j]? then
        throwError "Auto does not accept duplicated input terms"

def checkDuplicatedLemmaDB (names : Array Name) : TacticM Unit :=
  let n := names.size
  for i in [0:n] do
    for j in [i+1:n] do
      if names[i]? == names[j]? then
        throwError "Auto does not accept duplicated lemma databases"

def collectAllLemmas
  (hintstx : TSyntax ``hints) (uords : Array (TSyntax `Auto.uord)) (ngoalAndBinders : Array FVarId) :
  -- The first `Array Lemma` are `Prop` lemmas
  -- The second `Array Lemma` are Inhabitation facts
  TacticM (Array Lemma √ó Array Lemma) := do
  let inputHints ‚Üê parseHints hintstx
  let (unfoldInfos, defeqNames) ‚Üê parseUOrDs uords
  let unfoldInfos ‚Üê Prep.topoSortUnfolds unfoldInfos
  let startTime ‚Üê IO.monoMsNow
  let lctxLemmas ‚Üê collectLctxLemmas inputHints.lctxhyps ngoalAndBinders
  let lctxLemmas ‚Üê lctxLemmas.mapM (m:=MetaM) (unfoldConstAndPreprocessLemma unfoldInfos)
  traceLemmas `auto.printLemmas "Lemmas collected from local context:" lctxLemmas
  checkDuplicatedFact inputHints.terms
  checkDuplicatedLemmaDB inputHints.lemdbs
  let userLemmas := (‚Üê collectUserLemmas inputHints.terms) ++ (‚Üê collectHintDBLemmas inputHints.lemdbs)
  let userLemmas ‚Üê userLemmas.mapM (m:=MetaM) (unfoldConstAndPreprocessLemma unfoldInfos)
  traceLemmas `auto.printLemmas "Lemmas collected from user-provided terms:" userLemmas
  let defeqLemmas ‚Üê collectDefeqLemmas defeqNames
  let defeqLemmas ‚Üê defeqLemmas.mapM (m:=MetaM) (unfoldConstAndprepReduceDefeq unfoldInfos)
  traceLemmas `auto.printLemmas "Lemmas collected from user-provided defeq hints:" defeqLemmas
  trace[auto.tactic] "Preprocessing took {(‚Üê IO.monoMsNow) - startTime}ms"
  let inhFacts ‚Üê Inhabitation.getInhFactsFromLCtx
  let inhFacts ‚Üê inhFacts.mapM (m:=MetaM) (unfoldConstAndPreprocessLemma unfoldInfos)
  traceLemmas `auto.printLemmas "Inhabitation lemmas :" inhFacts
  return (lctxLemmas ++ userLemmas ++ defeqLemmas, inhFacts)

open Embedding.Lam in
def queryTPTP (exportFacts : Array REntry) : LamReif.ReifM (Option Expr √ó Option (Array REntry)) := do
  let lamVarTy := (‚Üê LamReif.getVarVal).map Prod.snd
  let lamEVarTy ‚Üê LamReif.getLamEVarTy
  let exportLamTerms ‚Üê exportFacts.mapM (fun re => do
    match re with
    | .valid [] t => return t
    | _ => throwError "{decl_name%} :: Unexpected error")
  let query ‚Üê if (auto.mono.mode.get (‚Üê getOptions)) == MonoMode.fol then
    lam2FOF lamVarTy lamEVarTy exportLamTerms
  else
    lam2TH0 lamVarTy lamEVarTy exportLamTerms
  trace[auto.tptp.printQuery] "\n{query}"
  let (proven, tptpProof) ‚Üê Solver.TPTP.querySolver query
  if !proven then
    return (.none, .none)
  try
    let proofSteps ‚Üê Parser.TPTP.getProof lamVarTy lamEVarTy tptpProof
    for step in proofSteps do
      trace[auto.tptp.printProof] "{step}"
  catch e =>
    trace[auto.tptp.printProof] "TPTP proof reification failed with {e.toMessageData}"
  let unsatCoreIds ‚Üê Parser.TPTP.unsatCore tptpProof
  let mut unsatCore := #[]
  for n in unsatCoreIds do
    let .some re := exportFacts[n]?
      | throwError "{decl_name%} :: Index {n} out of range"
    unsatCore := unsatCore.push re
  if (auto.tptp.trust.get (‚Üê getOptions)) then
    logWarning "Trusting TPTP solvers. `autoTPTPSorry` is used to discharge the goal."
    return (‚Üê Meta.mkAppM ``autoTPTPSorry #[Expr.const ``False []], unsatCore)
  else
    return (.none, unsatCore)

open Embedding.Lam in
def querySMT (exportFacts : Array REntry) (exportInds : Array MutualIndInfo) : LamReif.ReifM (Option Expr √ó Option (Array REntry)) := do
  let lamVarTy := (‚Üê LamReif.getVarVal).map Prod.snd
  let lamEVarTy ‚Üê LamReif.getLamEVarTy
  let exportLamTerms ‚Üê exportFacts.mapM (fun re => do
    match re with
    | .valid [] t => return t
    | _ => throwError "{decl_name%} :: Unexpected error")
  let sni : SMT.SMTNamingInfo :=
    {tyVal := (‚Üê LamReif.getTyVal), varVal := (‚Üê LamReif.getVarVal), lamEVarTy := (‚Üê LamReif.getLamEVarTy)}
  let ((commands, validFacts), state) ‚Üê (lamFOL2SMT sni lamVarTy lamEVarTy exportLamTerms exportInds).run
  for cmd in commands do
    trace[auto.smt.printCommands] "{cmd}"
  if (auto.smt.save.get (‚Üê getOptions)) then
    Solver.SMT.saveQuery commands
  let .some (unsatCore, proof) ‚Üê Solver.SMT.querySolver commands
    | return (.none, .none)
  let unsatCoreIds ‚Üê Solver.SMT.validFactOfUnsatCore unsatCore
  -- **Print valuation of SMT atoms**
  SMT.withExprValuation sni state.h2lMap (fun tyValMap varValMap etomValMap => do
    for (atomic, name) in state.h2lMap.toArray do
      let e ‚Üê SMT.LamAtomic.toLeanExpr tyValMap varValMap etomValMap atomic
      trace[auto.smt.printValuation] "|{name}| : {e}"
    )
  -- **Print STerms corresponding to `validFacts` in unsatCore**
  for id in unsatCoreIds do
    let .some sterm := validFacts[id]?
      | throwError "{decl_name%} :: Index {id} of `validFacts` out of range"
    trace[auto.smt.unsatCore.smtTerms] "|valid_fact_{id}| : {sterm}"
  -- **Print Lean expressions correesponding to `validFacts` in unsatCore**
  SMT.withExprValuation sni state.h2lMap (fun tyValMap varValMap etomValMap => do
    for id in unsatCoreIds do
      let .some t := exportLamTerms[id]?
        | throwError "{decl_name%} :: Index {id} of `exportLamTerms` out of range"
      let e ‚Üê Lam2D.interpLamTermAsUnlifted tyValMap varValMap etomValMap 0 t
      trace[auto.smt.unsatCore.leanExprs] "|valid_fact_{id}| : {‚Üê Core.betaReduce e}"
    )
  -- **Print derivation of unsatCore**
  for id in unsatCoreIds do
    let .some t := exportLamTerms[id]?
      | throwError "{decl_name%} :: Index {id} of `exportLamTerm` out of range"
    let vderiv ‚Üê LamReif.collectDerivFor (.valid [] t)
    trace[auto.smt.unsatCore.deriv] "|valid_fact_{id}| : {vderiv}"
  -- **Getting unsatCore**
  let mut unsatCore := #[]
  for id in unsatCoreIds do
    let .some re := exportFacts[id]?
      | throwError "{decl_name%} :: Index {id}  of `exportFacts` out of range"
    unsatCore := unsatCore.push re
  if auto.smt.rconsProof.get (‚Üê getOptions) then
    let (_, _) ‚Üê Solver.SMT.getSexp proof
    logWarning "Proof reconstruction is not implemented."
  if (auto.smt.trust.get (‚Üê getOptions)) then
    logWarning "Trusting SMT solvers. `autoSMTSorry` is used to discharge the goal."
    return (‚Üê Meta.mkAppM ``autoSMTSorry #[Expr.const ``False []], unsatCore)
  else
    return (.none, unsatCore)

open LamReif Embedding.Lam in
/--
  Given
  ¬∑ `nonempties = #[s‚ÇÄ, s‚ÇÅ, ‚ãØ, s·µ§‚Çã‚ÇÅ]`
  ¬∑ `valids = #[t‚ÇÄ, t‚ÇÅ, ‚ãØ, k‚Çñ‚Çã‚ÇÅ]`
  Invoke prover to get a proof of
    `proof : (‚àÄ (_ : v‚ÇÄ) (_ : v‚ÇÅ) ‚ãØ (_ : v·µ§‚Çã‚ÇÅ), w‚ÇÄ ‚Üí w‚ÇÅ ‚Üí ‚ãØ ‚Üí w‚Çó‚Çã‚ÇÅ ‚Üí ‚ä•).interp`
  and returns
  ¬∑ `fun etoms => proof`
  ¬∑ `‚àÄ etoms, ‚àÄ (_ : v‚ÇÄ) (_ : v‚ÇÅ) ‚ãØ (_ : v·µ§‚Çã‚ÇÅ), w‚ÇÄ ‚Üí w‚ÇÅ ‚Üí ‚ãØ ‚Üí w‚Çó‚Çã‚ÇÅ ‚Üí ‚ä•)`
  ¬∑ `etoms`
  ¬∑ `[s‚ÇÄ, s‚ÇÅ, ‚ãØ, s·µ§‚Çã‚ÇÅ]`
  ¬∑ `[w‚ÇÄ, w‚ÇÅ, ‚ãØ, w‚Çó‚Çã‚ÇÅ]`
  Here
  ¬∑ `[v‚ÇÄ, v‚ÇÅ, ‚ãØ, v·µ§‚Çã‚ÇÅ]` is a subsequence of `[s‚ÇÄ, s‚ÇÅ, ‚ãØ, s·µ§‚Çã‚ÇÅ]`
  ¬∑ `[w‚ÇÄ, w‚ÇÅ, ‚ãØ, w‚Çó‚Çã‚ÇÅ]` is a subsequence of `[t‚ÇÄ, t‚ÇÅ, ‚ãØ, k‚Çñ‚Çã‚ÇÅ]`
  ¬∑ `etoms` are all the etoms present in `w‚ÇÄ ‚Üí w‚ÇÅ ‚Üí ‚ãØ ‚Üí w‚Çó‚Çã‚ÇÅ ‚Üí ‚ä•`

  Note that `MetaState.withTemporaryLCtx` is used to isolate the prover from the
  current local context. This is necessary because `lean-auto` assumes that the prover
  does not use free variables introduced during monomorphization
-/
def callNative_checker
  (nonempties : Array REntry) (valids : Array REntry) (prover : Array Lemma ‚Üí Array Lemma ‚Üí MetaM Expr) :
  ReifM (Expr √ó LamTerm √ó Array Nat √ó Array REntry √ó Array REntry) := do
  let tyVal ‚Üê LamReif.getTyVal
  let varVal ‚Üê LamReif.getVarVal
  let lamEVarTy ‚Üê LamReif.getLamEVarTy
  let nonemptiesWithDTr ‚Üê nonempties.mapM (fun re =>
    do return (re, ‚Üê collectDerivFor re))
  let validsWithDTr ‚Üê valids.mapM (fun re =>
    do return (re, ‚Üê collectDerivFor re))
  MetaState.runAtMetaM' <| (Lam2DAAF.callNativeWithAtomAsFVar nonemptiesWithDTr validsWithDTr prover).run'
    { tyVal := tyVal, varVal := varVal, lamEVarTy := lamEVarTy }

open LamReif Embedding.Lam in
/--
  Similar in functionality compared to `callNative_checker`, but
  all `valid` entries are supposed to be reified facts (so there should
  be no `etom`s). We invoke the prover to get the same `proof` as
  `callNativeChecker`, but we return a proof of `‚ä•` by applying `proof`
  to un-reified facts.

  Note that `MetaState.withTemporaryLCtx` is used to isolate the prover from the
  current local context. This is necessary because `lean-auto` assumes that the prover
  does not use free variables introduced during monomorphization
-/
def callNative_direct
  (nonempties : Array REntry) (valids : Array REntry) (prover : Array Lemma ‚Üí Array Lemma ‚Üí MetaM Expr) : ReifM Expr := do
  let tyVal ‚Üê LamReif.getTyVal
  let varVal ‚Üê LamReif.getVarVal
  let lamEVarTy ‚Üê LamReif.getLamEVarTy
  let nonemptiesWithDTr ‚Üê nonempties.mapM (fun re =>
    do return (re, ‚Üê collectDerivFor re))
  let validsWithDTr ‚Üê valids.mapM (fun re =>
    do return (re, ‚Üê collectDerivFor re))
  let (proof, _, usedEtoms, usedInhs, usedHyps) ‚Üê MetaState.runAtMetaM' <|
    (Lam2DAAF.callNativeWithAtomAsFVar nonemptiesWithDTr validsWithDTr prover).run'
      { tyVal := tyVal, varVal := varVal, lamEVarTy := lamEVarTy }
  if usedEtoms.size != 0 then
    throwError "{decl_name%} :: etoms should not occur here"
  let ss ‚Üê usedInhs.mapM (fun re => do
    match ‚Üê lookupREntryProof! re with
    | .inhabitation e _ _ => return e
    | .chkStep (.n (.nonemptyOfAtom n)) =>
      match varVal[n]? with
      | .some (e, _) => return e
      | .none => throwError "{decl_name%} :: Unexpected error"
    | _ => throwError "{decl_name%} :: Cannot find external proof of {re}")
  let ts ‚Üê usedHyps.mapM (fun re => do
    let .assertion e _ _ ‚Üê lookupREntryProof! re
      | throwError "{decl_name%} :: Cannot find external proof of {re}"
    return e)
  return mkAppN proof (ss ++ ts)

open Embedding.Lam in
/--
  If `prover?` is specified, use the specified one.
  Otherwise use the one determined by `Solver.Native.queryNative`
-/
def queryNative
  (declName? : Option Name) (exportFacts exportInhs : Array REntry)
  (prover? : Option (Array Lemma ‚Üí Array Lemma ‚Üí MetaM Expr) := .none) : LamReif.ReifM (Option Expr) := do
  let (proof, proofLamTerm, usedEtoms, usedInhs, unsatCore) ‚Üê
    callNative_checker exportInhs exportFacts (prover?.getD Solver.Native.queryNative)
  LamReif.newAssertion proof (.leaf "by_native::queryNative") proofLamTerm
  let etomInstantiated ‚Üê LamReif.validOfInstantiateForall (.valid [] proofLamTerm) (usedEtoms.map .etom)
  let forallElimed ‚Üê LamReif.validOfElimForalls etomInstantiated usedInhs
  let contra ‚Üê LamReif.validOfImps forallElimed unsatCore
  LamReif.printProofs
  Reif.setDeclName? declName?
  let checker ‚Üê LamReif.buildCheckerExprFor contra
  Meta.mkAppM ``Embedding.Lam.LamThmValid.getFalse #[checker]

def rewriteIteCondDecide (lemmas : Array Lemma) : MetaM (Array Lemma) := do
  -- Simplify `ite`
  let ite_simp_lem ‚Üê Lemma.ofConst ``Auto.Bool.ite_simp (.leaf "hw Auto.Bool.ite_simp")
  let lemmas ‚Üê lemmas.mapM (fun lem => Lemma.rewriteUPolyRigid lem ite_simp_lem)
  -- Simplify `cond`
  let cond_simp_lem ‚Üê Lemma.ofConst ``Auto.Bool.cond_simp (.leaf "hw Auto.Bool.cond_simp")
  let lemmas ‚Üê lemmas.mapM (fun lem => Lemma.rewriteUPolyRigid lem cond_simp_lem)
  -- Simplify `decide`
  let decide_simp_lem ‚Üê Lemma.ofConst ``Auto.Bool.decide_simp (.leaf "hw Auto.Bool.decide_simp")
  let lemmas ‚Üê lemmas.mapM (fun lem => Lemma.rewriteUPolyRigid lem decide_simp_lem)
  return lemmas

/--
  Run `auto`'s monomorphization and preprocessing, then send the problem to different solvers
-/
def runAuto
  (declName? : Option Name) (lemmas : Array Lemma) (inhFacts : Array Lemma) : MetaM Expr :=
  Meta.withDefault do
    traceLemmas `auto.runAuto.printLemmas s!"All lemmas received by {decl_name%}:" lemmas
    let lemmas ‚Üê rewriteIteCondDecide lemmas
    let (proof, _) ‚Üê Monomorphization.monomorphize lemmas inhFacts (@id (Reif.ReifM Expr) do
      let s ‚Üê get
      let u ‚Üê computeMaxLevel s.facts
      (reifMAction s.facts s.inhTys s.inds).run' {u := u})
    trace[auto.tactic] "Auto found proof of {‚Üê Meta.inferType proof}"
    trace[auto.tactic.printProof] "{proof}"
    return proof
where
  reifMAction
    (uvalids : Array UMonoFact) (uinhs : Array UMonoFact)
    (minds : Array (Array SimpleIndVal)) : LamReif.ReifM Expr := do
    let exportFacts ‚Üê LamReif.reifFacts uvalids
    let mut exportFacts := exportFacts.map (Embedding.Lam.REntry.valid [])
    let _ ‚Üê LamReif.reifInhabitations uinhs
    let exportInhs := (‚Üê LamReif.getRst).nonemptyMap.toArray.map
      (fun (s, _) => Embedding.Lam.REntry.nonempty s)
    let exportInds ‚Üê LamReif.reifMutInds minds
    LamReif.printValuation
    -- **Preprocessing in Verified Checker**
    let (exportFacts', exportInds) ‚Üê LamReif.preprocess exportFacts exportInds
    exportFacts := exportFacts'
    -- **TPTP invocation and Premise Selection**
    if auto.tptp.get (‚Üê getOptions) then
      let (proof, unsatCore) ‚Üê queryTPTP exportFacts
      if let .some proof := proof then
        return proof
      let premiseSel? := auto.tptp.premiseSelection.get (‚Üê getOptions)
      if premiseSel? then
        if let .some unsatCore := unsatCore then
          exportFacts := unsatCore
    -- **SMT**
    if auto.smt.get (‚Üê getOptions) then
      let (proof, _) ‚Üê querySMT exportFacts exportInds
      if let .some proof := proof then
        return proof
    -- **Native Prover**
    exportFacts := exportFacts.append (‚Üê LamReif.auxLemmas exportFacts)
    if auto.native.get (‚Üê getOptions) then
      if let .some proof ‚Üê queryNative declName? exportFacts exportInhs then
        return proof
    throwError "Auto failed to find proof"

@[tactic auto]
def evalAuto : Tactic
| `(auto | auto $instr $hints $[$uords]*) => withMainContext do
  -- Suppose the goal is `‚àÄ (x‚ÇÅ x‚ÇÇ ‚ãØ x‚Çô), G`
  -- First, apply `intros` to put `x‚ÇÅ x‚ÇÇ ‚ãØ x‚Çô` into the local context,
  --   now the goal is just `G`
  let (goalBinders, newGoal) ‚Üê (‚Üê getMainGoal).intros
  let [nngoal] ‚Üê newGoal.apply (.const ``Classical.byContradiction [])
    | throwError "{decl_name%} :: Unexpected result after applying Classical.byContradiction"
  let (ngoal, absurd) ‚Üê MVarId.intro1 nngoal
  replaceMainGoal [absurd]
  withMainContext do
    let instr ‚Üê parseInstr instr
    match instr with
    | .none =>
      let (lemmas, inhFacts) ‚Üê collectAllLemmas hints uords (goalBinders.push ngoal)
      let declName? ‚Üê Elab.Term.getDeclName?
      let proof ‚Üê runAuto declName? lemmas inhFacts
      absurd.assign proof
    | .useSorry =>
      let proof ‚Üê Meta.mkAppM ``sorryAx #[Expr.const ``False [], Expr.const ``false []]
      absurd.assign proof
| _ => throwUnsupportedSyntax

@[tactic intromono]
def evalIntromono : Tactic
| `(intromono | intromono $hints $[$uords]*) => withMainContext do
  let (goalBinders, newGoal) ‚Üê (‚Üê getMainGoal).intros
  let [nngoal] ‚Üê newGoal.apply (.const ``Classical.byContradiction [])
    | throwError "{decl_name%} :: Unexpected result after applying Classical.byContradiction"
  let (ngoal, absurd) ‚Üê MVarId.intro1 nngoal
  replaceMainGoal [absurd]
  withMainContext do
    let (lemmas, _) ‚Üê collectAllLemmas hints uords (goalBinders.push ngoal)
    let newMid ‚Üê Monomorphization.intromono lemmas absurd
    replaceMainGoal [newMid]
| _ => throwUnsupportedSyntax

/--
  A monomorphization interface that can be invoked by repos dependent on `lean-auto`.
-/
def monoInterface
  (lemmas : Array Lemma) (inhFacts : Array Lemma)
  (prover : Array Lemma ‚Üí Array Lemma ‚Üí MetaM Expr) : MetaM Expr := do
  let afterReify (uvalids : Array UMonoFact) (uinhs : Array UMonoFact) : LamReif.ReifM Expr := (do
    let exportFacts ‚Üê LamReif.reifFacts uvalids
    let exportFacts := exportFacts.map (Embedding.Lam.REntry.valid [])
    let _ ‚Üê LamReif.reifInhabitations uinhs
    let exportInhs := (‚Üê LamReif.getRst).nonemptyMap.toArray.map
      (fun (s, _) => Embedding.Lam.REntry.nonempty s)
    LamReif.printValuation
    callNative_direct exportInhs exportFacts prover)
  let (proof, _) ‚Üê Monomorphization.monomorphize lemmas inhFacts (@id (Reif.ReifM Expr) do
    let uvalids ‚Üê liftM <| Reif.getFacts
    let uinhs ‚Üê liftM <| Reif.getInhTys
    let u ‚Üê computeMaxLevel uvalids
    (afterReify uvalids uinhs).run' {u := u})
  return proof

/--
  Run native `prover` with monomorphization and preprocessing of `auto`
-/
def runNativeProverWithAuto
  (declName? : Option Name) (prover : Array Lemma ‚Üí Array Lemma ‚Üí MetaM Expr)
  (lemmas : Array Lemma) (inhFacts : Array Lemma) : MetaM Expr := do
  let afterReify (uvalids : Array UMonoFact) (uinhs : Array UMonoFact) : LamReif.ReifM Expr := (do
    let exportFacts ‚Üê LamReif.reifFacts uvalids
    let exportFacts := exportFacts.map (Embedding.Lam.REntry.valid [])
    let _ ‚Üê LamReif.reifInhabitations uinhs
    let exportInhs := (‚Üê LamReif.getRst).nonemptyMap.toArray.map
      (fun (s, _) => Embedding.Lam.REntry.nonempty s)
    LamReif.printValuation
    let (exportFacts, _) ‚Üê LamReif.preprocess exportFacts #[]
    if let .some expr ‚Üê queryNative declName? exportFacts exportInhs prover then
      return expr
    else
      throwError "{decl_name%} :: Failed to find proof")
  let (proof, _) ‚Üê Monomorphization.monomorphize lemmas inhFacts (@id (Reif.ReifM Expr) do
    let s ‚Üê get
    let u ‚Üê computeMaxLevel s.facts
    (afterReify s.facts s.inhTys).run' {u := u})
  trace[auto.tactic] "{decl_name%} :: Found proof of {‚Üê Meta.inferType proof}"
  return proof

@[tactic mononative]
def evalMonoNative : Tactic
| `(mononative | mononative $hints $[$uords]*) => withMainContext do
  -- Suppose the goal is `‚àÄ (x‚ÇÅ x‚ÇÇ ‚ãØ x‚Çô), G`
  -- First, apply `intros` to put `x‚ÇÅ x‚ÇÇ ‚ãØ x‚Çô` into the local context,
  --   now the goal is just `G`
  let (goalBinders, newGoal) ‚Üê (‚Üê getMainGoal).intros
  let [nngoal] ‚Üê newGoal.apply (.const ``Classical.byContradiction [])
    | throwError "{decl_name%} :: Unexpected result after applying Classical.byContradiction"
  let (ngoal, absurd) ‚Üê MVarId.intro1 nngoal
  replaceMainGoal [absurd]
  withMainContext do
    let (lemmas, inhFacts) ‚Üê collectAllLemmas hints uords (goalBinders.push ngoal)
    let proof ‚Üê monoInterface lemmas inhFacts Solver.Native.queryNative
    absurd.assign proof
| _ => throwUnsupportedSyntax



/- #####################################
  SC-TPTP related code
##################################### -/

set_option push_neg.use_distrib true

/- A few lemmas for prenex normalization -/
@[simp]
theorem and_exists_prenex (p) (q : Œ± ‚Üí Prop) : p ‚àß (‚àÉ a, q a) ‚Üî ‚àÉ a, p ‚àß q a := by
  apply Iff.intro
  case mp =>
    intro ‚ü®a, b, c‚ü©
    exact ‚ü®b, a, c‚ü©
  case mpr =>
    intro ‚ü®a, b, c‚ü©
    exact ‚ü®b, a, c‚ü©

@[simp]
theorem and_forall_prenex [Nonempty Œ±] (p) (q : Œ± ‚Üí Prop) : p ‚àß (‚àÄ a, q a) ‚Üî ‚àÄ a, p ‚àß q a := by
  apply Iff.intro
  case mp =>
    intro ‚ü®a, b‚ü© c
    exact ‚ü®a, b c‚ü©
  case mpr =>
    intro a
    refine ‚ü®(a Classical.ofNonempty).1, ?_‚ü©
    intro b
    exact (a b).2

@[simp]
theorem exists_and_prenex (p) (q : Œ± ‚Üí Prop) : (‚àÉ a, q a) ‚àß p ‚Üî ‚àÉ a, q a ‚àß p := by
  apply Iff.intro
  ¬∑ intro h
    obtain ‚ü®‚ü®a, ha‚ü©, hp‚ü© := h
    exact ‚ü®a, ha, hp‚ü©
  ¬∑ intro h
    obtain ‚ü®a, ha, hp‚ü© := h
    exact ‚ü®‚ü®a, ha‚ü©, hp‚ü©

@[simp]
theorem forall_and_prenex [Nonempty Œ±] (p) (q : Œ± ‚Üí Prop) : (‚àÄ a, q a) ‚àß p ‚Üî ‚àÄ a, q a ‚àß p := by
  apply Iff.intro
  ¬∑ intro h
    intro a
    obtain ‚ü®hq, hp‚ü© := h
    exact ‚ü®hq a, hp‚ü©
  ¬∑ intro h
    apply And.intro
    ¬∑ intro a
      obtain ‚ü®hqa, _‚ü© := h a
      exact hqa
    ¬∑ obtain ‚ü®_, hp‚ü© := h (Classical.arbitrary Œ±)
      exact hp

@[simp]
theorem or_exists_prenex [Nonempty Œ±] (p) (q : Œ± ‚Üí Prop) : p ‚à® (‚àÉ a, q a) ‚Üî ‚àÉ a, p ‚à® q a := by
  apply Iff.intro
  ¬∑ intro h
    match h with
    | Or.inl hp =>
      exact ‚ü®Classical.arbitrary Œ±, Or.inl hp‚ü©
    | Or.inr hex =>
      obtain ‚ü®a, ha‚ü© := hex
      exact ‚ü®a, Or.inr ha‚ü©
  ¬∑ intro h
    obtain ‚ü®a, ha‚ü© := h
    match ha with
    | Or.inl hp => exact Or.inl hp
    | Or.inr hqa => exact Or.inr ‚ü®a, hqa‚ü©

@[simp]
theorem or_forall_prenex (p) (q : Œ± ‚Üí Prop) : p ‚à® (‚àÄ a, q a) ‚Üî ‚àÄ a, p ‚à® q a := by
  apply Iff.intro
  ¬∑ intro h
    intro a
    match h with
    | Or.inl hp => exact Or.inl hp
    | Or.inr hq => exact Or.inr (hq a)
  ¬∑ intro h
    by_cases hp : p
    ¬∑ exact Or.inl hp
    ¬∑ apply Or.inr
      intro a
      match h a with
      | Or.inl hp' => contradiction
      | Or.inr hqa => exact hqa

@[simp]
theorem exists_or_prenex [Nonempty Œ±] (p) (q : Œ± ‚Üí Prop) : (‚àÉ a, q a) ‚à® p ‚Üî ‚àÉ a, q a ‚à® p := by
  apply Iff.intro
  ¬∑ intro h
    match h with
    | Or.inl hex =>
      obtain ‚ü®a, ha‚ü© := hex
      exact ‚ü®a, Or.inl ha‚ü©
    | Or.inr hp =>
      exact ‚ü®Classical.arbitrary Œ±, Or.inr hp‚ü©
  ¬∑ intro h
    obtain ‚ü®a, ha‚ü© := h
    match ha with
    | Or.inl hqa => exact Or.inl ‚ü®a, hqa‚ü©
    | Or.inr hp => exact Or.inr hp

@[simp]
theorem forall_or_prenex (p) (q : Œ± ‚Üí Prop) : (‚àÄ a, q a) ‚à® p ‚Üî ‚àÄ a, q a ‚à® p := by
  apply Iff.intro
  ¬∑ intro h
    intro a
    match h with
    | Or.inl hq => exact Or.inl (hq a)
    | Or.inr hp => exact Or.inr hp
  ¬∑ intro h
    by_cases hp : p
    ¬∑ exact Or.inr hp
    ¬∑ apply Or.inl
      intro a
      match h a with
      | Or.inl hqa => exact hqa
      | Or.inr hp' => contradiction


open Lean Elab Tactic Meta

/--
A helper that, given a name and an expression for the type (P), creates
a new goal for proving P and adds a hypothesis (H : P) to the current goal.
-/
def haveExpr (hName : Name) (p : Expr) : TacticM Unit := do
  -- current goal is G.
  let currentMainGoal ‚Üê getMainGoal

  -- Create a new goal to prove p.
  let newGoal ‚Üê mkFreshExprMVar (.some p) (userName := hName)

  -- Assert is essentially the Expr level of `have`.
  let newMainGoal ‚Üê currentMainGoal.assert hName p newGoal
  -- We then need to introduce the binding into the context.
  let (_fvar, newMainGoal) ‚Üê newMainGoal.intro1P

  -- set the goal to the `have` goal and the new main goal with the have introduced.
  replaceMainGoal [newGoal.mvarId!, newMainGoal]

-- Test the implementation of `haveExpr`
example : True := by
  run_tac do
    haveExpr `Random (‚Üê elabTerm (‚Üê `(True)) .none)
  ¬∑ exact True.intro
  ¬∑ exact Random

#check LocalContext
def evalSpecialize (n : Name) (e : Expr) : TacticM Unit := withMainContext do
  -- let (e, mvarIds') ‚Üê elabTermWithHoles e none `specialize (allowNaturalHoles := true)
  let lctx ‚Üê getLCtx
  let .some localDecl := lctx.findFromUserName? n
    | throwError m!"{decl_name%} : Could not find {n} in context"
  let applied := .app (.fvar localDecl.fvarId) e
  let mvarId ‚Üê (‚Üê getMainGoal).assert localDecl.userName (‚Üê inferType applied).headBeta applied
  let (_, mvarId) ‚Üê mvarId.intro1P
  let mvarId ‚Üê mvarId.tryClear localDecl.fvarId
  replaceMainGoal [mvarId]

example : True := by
  run_tac do
    haveExpr `Random (‚Üê elabTerm (‚Üê `(True ‚Üí True)) .none)
  ¬∑ exact fun _ => True.intro
  ¬∑ run_tac evalSpecialize `Random (‚Üê elabTerm (‚Üê `(True.intro)) .none)
    exact Random

def evalApply (e : Expr) : TacticM Unit := withMainContext do
  liftMetaTactic fun g => do
  let [newG] ‚Üê g.apply e
    | throwError "{decl_name%} :: Too many arguments"
  return [newG]

def getHypExpr (n : Name) : TacticM Expr := withMainContext do
  let lctx ‚Üê getLCtx
  let .some localDecl := lctx.findFromUserName? n
    | throwError m!"{decl_name%} : Could not find {n} in context {lctx.getFVars}"
  return ‚Üê Parser.TPTP.resolveTypes localDecl.type

def getLocalContextStr : TacticM String := withMainContext do
  let lctx ‚Üê getLCtx
  let mut s := ""
  for decl in lctx do
    let ty ‚Üê Parser.TPTP.resolveTypes decl.type
    s := s ++ s!"- {decl.userName} : {‚Üê ppExpr ty}\n"
  let goalStr ‚Üê ppExpr (‚Üê (‚Üê getMainGoal).getType)
  s := s ++ s!"‚ä¢ {goalStr}"
  return s

def getHypDecl (e : Expr) (addNot : Bool := False) : TacticM LocalDecl := withMainContext do
  let mut e ‚Üê Parser.TPTP.resolveTypes e
  if addNot then
    e := mkApp (mkConst ``Not) e
  let lctx ‚Üê getLCtx
  for decl in lctx do
    let ty := decl.type
    if ‚Üê isDefEq ty e then
      return decl

  throwError s!"Cannot find hypothesis for `{e}` (type: {‚Üê inferType e}) in context:\n{‚Üê getLocalContextStr}"

def getHypName (e : Expr) (addNot : Bool := False) : TacticM Name := withMainContext do
  getHypDecl e addNot >>= fun decl => return decl.userName

def getHypFvar (e : Expr) (addNot : Bool := false) : TacticM FVarId := withMainContext do
  getHypDecl e addNot >>= fun decl => return decl.fvarId

open Parser.TPTP in
def instMultImpl (args : List (String √ó Expr)) (proofstep : ProofStep) : TacticM Unit := withMainContext do
  let hypDecls := (‚Üê proofstep.antecedents.mapM getHypDecl) ++ (‚Üê proofstep.consequents.mapM getHypDecl)
  let funNames := args.map fun ‚ü®funNameStr, _‚ü© => Name.str .anonymous funNameStr
  let exprs ‚Üê args.mapM fun ‚ü®_, expr‚ü© => do resolveTypes expr
  let mut mvarId ‚Üê getMainGoal
  -- branch cases: for expr with arity > 0, we need to do some `changeLocalDecl`
  let argsPosArity := (exprs.zip funNames).filter fun (expr, _) =>
    match expr with
    | Expr.lam _ _ _ _ => true
    | _ => false
  if argsPosArity.length > 0 then
    let funNamesPosArity := argsPosArity.map fun (_, funName) => funName
    let exprsPosArity := argsPosArity.map fun (expr, _) => expr
    for hypDecl in hypDecls do
      let hypExpr ‚Üê resolveTypes hypDecl.type
      let hypFvar := hypDecl.fvarId
      mvarId ‚Üê MVarId.changeLocalDecl mvarId hypFvar
                (hypExpr.replace (fun e =>
                  match e with
                  | Expr.const n _ => if funNamesPosArity.contains n then some exprsPosArity[funNamesPosArity.indexOf n]! else none
                  | _ => none))
  -- Then generalize
  mvarId.withContext do
    for (expr, funName) in exprs.zip funNames do
      let args : Array GeneralizeArg := (hypDecls.map (fun _ => ‚ü®expr, some funName, none‚ü©)).toArray
      let hyps := (hypDecls.map (fun decl => decl.fvarId)).toArray
      let mvarIdLoc ‚Üê getMainGoal
      let (_, _, mvarIdLoc) ‚Üê mvarIdLoc.generalizeHyp args hyps
      mvarIdLoc.withContext do
        replaceMainGoal [mvarIdLoc]

open Parser.TPTP Parser.TPTP.InferenceRule in
/-- Given a parsed and reified TPTP proofstep, dispatch to the corresponding Lean tactic(s). -/
def applyProofStep (proofstep : ProofStep) (premisesProofstep : Array ProofStep) : TacticM Unit := withMainContext do
  let psName := (.str .anonymous proofstep.name)

  match proofstep.rule with
  -- Level 1
  | leftFalse _ => do evalTactic (‚Üê `(tactic| assumption))
  | rightTrue _ => do evalTactic (‚Üê `(tactic| assumption))
  | hyp _       => do evalTactic (‚Üê `(tactic| contradiction))
  | leftWeaken _ => pure ()
  | rightWeaken _ => pure ()

  | cut i => do
    let formula ‚Üê resolveTypes premisesProofstep[0]!.consequents[i]!
    haveExpr psName formula
    Meta.check (‚Üê (‚Üê getMainGoal).getType)
    evalTactic (‚Üê `(tactic| apply Classical.byContradiction; intro $(mkIdent psName):ident))

  | leftAnd i => do
    let hypName ‚Üê getHypName proofstep.antecedents[i]!
    let (hypName1, hypName2) := (Name.str psName "1", Name.str psName "2")
    evalTactic (‚Üê `(tactic| cases $(mkIdent hypName):ident; rename_i $(mkIdent hypName1):ident $(mkIdent hypName2):ident))

  | leftOr i => do
    let hypName ‚Üê getHypName proofstep.antecedents[i]!
    evalTactic (‚Üê `(tactic| cases $(mkIdent hypName):ident <;> rename_i $(mkIdent psName):ident))

  | leftImplies i => do
    let hypName ‚Üê getHypName proofstep.antecedents[i]!
    evalTactic (‚Üê `(tactic| rw [imp_iff_not_or] at $(mkIdent hypName):ident))
    evalTactic (‚Üê `(tactic| cases $(mkIdent hypName):ident <;> rename_i $(mkIdent psName):ident))

  | leftIff i => do
    let hypName ‚Üê getHypName proofstep.antecedents[i]!
    let (hypName1, hypName2) := (Name.str psName "1", Name.str psName "2")
    evalTactic (‚Üê `(tactic| cases $(mkIdent hypName):ident; rename_i $(mkIdent hypName1):ident $(mkIdent hypName2):ident))

  | leftNot _ => pure ()

  | leftEx i y => do
    let hypName ‚Üê getHypName proofstep.consequents[i]! true
    evalTactic (‚Üê `(tactic| rcases $(mkIdent hypName):ident with ‚ü®$(mkIdent (.str .anonymous y)), $(mkIdent psName)‚ü©))

  | leftForall i t => do
    let hypName ‚Üê getHypName proofstep.antecedents[i]!
    trace[auto.tptp.printProof] "leftForall: {hypName}"
    evalTactic (‚Üê `(tactic| have $(mkIdent psName) := $(mkIdent hypName)))
    evalSpecialize psName t

  | rightAnd i => do
    let hypName ‚Üê getHypName proofstep.antecedents[i]! true
    evalTactic (‚Üê `(tactic| cases (Classical.not_and_iff_or_not_not.mp $(mkIdent hypName)) <;> rename_i $(mkIdent psName):ident))

  | rightOr i => do
    let hypName ‚Üê getHypName proofstep.antecedents[i]! true
    let (hypName1, hypName2) := (Name.str psName "1", Name.str psName "2")
    evalTactic (‚Üê `(tactic| rcases (not_or.mp $(mkIdent hypName)) with ‚ü®$(mkIdent hypName1), $(mkIdent hypName2)‚ü©))

  | rightImplies i => do
    let hypName ‚Üê getHypName proofstep.consequents[i]! true
    let (hypName1, hypName2) := (Name.str psName "1", Name.str psName "2")
    evalTactic (‚Üê `(tactic| rcases (Classical.not_imp.mp $(mkIdent hypName)) with ‚ü®$(mkIdent hypName1):ident, $(mkIdent hypName2)‚ü©))

  | rightIff i => do
    let hypName ‚Üê getHypName proofstep.consequents[i]! true
    evalTactic (‚Üê `(tactic| have $(mkIdent psName):ident := $(mkIdent hypName):ident))
    evalTactic (‚Üê `(tactic| rw [iff_iff_implies_and_implies] at $(mkIdent psName):ident))
    evalTactic (‚Üê `(tactic| cases (Classical.not_and_iff_or_not_not.mp $(mkIdent psName)) <;> rename_i $(mkIdent psName):ident))

  | rightNot i => do
    let hypName ‚Üê getHypName proofstep.consequents[i]! true
    evalTactic (‚Üê `(tactic| apply $(mkIdent hypName); intro $(mkIdent psName):ident))

  | rightEx i t => do
    let hypName ‚Üê getHypName proofstep.antecedents[i]!
    evalTactic (‚Üê `(tactic| have $(mkIdent psName) := $(mkIdent hypName)))
    evalTactic (‚Üê `(tactic| rw [not_exists] at $(mkIdent psName):ident))
    evalSpecialize psName t

  | rightForall i y => do
    let hypName ‚Üê getHypName proofstep.consequents[i]! true
    evalTactic (‚Üê `(tactic| rcases (Classical.not_forall.mp $(mkIdent hypName)) with ‚ü®$(mkIdent (.str .anonymous y)), $(mkIdent psName)‚ü©))

  | rightRefl _ => do evalTactic (‚Üê `(tactic| contradiction))

  | rightSubstEq i backward P => do
    let P ‚Üê resolveTypes P
    let equality ‚Üê resolveTypes proofstep.antecedents[i]!
    let (t, u) ‚Üê match equality with
      | Expr.app (.app (.app (.const ``Eq _) _) t) u =>
        if backward then pure (u, t) else pure (t, u)
      | _ => throwError s!"rightSubstEq: cannot find equality in the antecedent form {equality}"
    let P_u_hypName ‚Üê getHypName (P.app u) true
    let eqHypName ‚Üê getHypName equality
    let eqHypNameSymm := Name.str eqHypName "symm"
    evalTactic (‚Üê `(tactic| have $(mkIdent eqHypNameSymm) := $(mkIdent eqHypName).symm))
    withMainContext do
      let equality ‚Üê if backward then getHypExpr eqHypNameSymm else pure equality
      let subst ‚Üê Lean.Meta.mkAppOptM ``Eq.subst #[none, P, t, u, Expr.fvar (‚Üê getHypFvar equality)]
      evalTactic (‚Üê `(tactic| apply $(mkIdent P_u_hypName)))
      evalApply subst
      evalTactic (‚Üê `(tactic| apply Classical.byContradiction; intro $(mkIdent psName):ident))

  | leftSubstEq i backward P => do
    let P ‚Üê resolveTypes P
    let equality ‚Üê resolveTypes proofstep.antecedents[i]!
    let (t, u) ‚Üê match equality with
      | Expr.app (.app (.app (.const ``Eq _) _) t) u =>
        if backward then pure (u, t) else pure (t, u)
      | _ => throwError s!"leftSubstEq: cannot find equality in the antecedent form {equality}"
    let P_u_hypName ‚Üê getHypName (P.app u)
    let eqHypName ‚Üê getHypName equality
    let eqHypNameSymm := Name.str eqHypName "symm"
    evalTactic (‚Üê `(tactic| have $(mkIdent eqHypNameSymm) := $(mkIdent eqHypName).symm))
    withMainContext do
      let equality ‚Üê if backward then pure equality else getHypExpr eqHypNameSymm
      let subst ‚Üê Lean.Meta.mkAppOptM ``Eq.subst #[none, P, u, t, Expr.fvar (‚Üê getHypFvar equality)]
      haveExpr psName (P.app t)
      evalApply subst
      evalTactic (‚Üê `(tactic| exact $(mkIdent P_u_hypName)))

  | rightSubstIff i backward R => do
    let R ‚Üê resolveTypes R
    let equivalence ‚Üê resolveTypes proofstep.antecedents[i]!
    let (phi, psi) ‚Üê match equivalence with
      | Expr.app (.app (.const ``Iff _) phi) psi =>
        if backward then pure (psi, phi) else pure (phi, psi)
      | _ => throwError s!"rightSubstIff: cannot find equivalence in the antecedent form {equivalence}"
    let R_psi_hypName ‚Üê getHypName (R.app psi) true
    let eqHypName ‚Üê getHypName equivalence
    let eqHypNameSymm := Name.str eqHypName "symm"
    evalTactic (‚Üê `(tactic| have $(mkIdent eqHypNameSymm) := $(mkIdent eqHypName).symm))
    withMainContext do
      let equality ‚Üê if backward then getHypExpr eqHypNameSymm else pure equivalence
      let subst ‚Üê resolveTypes (‚Üê Lean.Meta.mkAppOptM ``Iff.subst #[phi, psi, R, Expr.fvar (‚Üê getHypFvar equality)])
      evalTactic (‚Üê `(tactic| apply $(mkIdent R_psi_hypName)))
      evalApply subst
      evalTactic (‚Üê `(tactic| apply Classical.byContradiction; intro $(mkIdent psName):ident))

  | leftSubstIff i backward R => do
    let R ‚Üê resolveTypes R
    let equivalence ‚Üê resolveTypes proofstep.antecedents[i]!
    let (phi, psi) ‚Üê match equivalence with
      | Expr.app (.app (.const ``Iff _) phi) psi =>
        if backward then pure (psi, phi) else pure (phi, psi)
      | _ => throwError s!"leftSubstIff: cannot find equivalence in the antecedent form {equivalence}"
    let R_psi_hypName ‚Üê getHypName (R.app psi)
    let eqHypName ‚Üê getHypName equivalence
    let eqHypNameSymm := Name.str eqHypName "symm"
    evalTactic (‚Üê `(tactic| have $(mkIdent eqHypNameSymm) := $(mkIdent eqHypName).symm))
    withMainContext do
      let equality ‚Üê if backward then pure equivalence else getHypExpr eqHypNameSymm
      let subst ‚Üê resolveTypes (‚Üê Lean.Meta.mkAppOptM ``Iff.subst #[psi, phi, R, Expr.fvar (‚Üê getHypFvar equality)])
      haveExpr psName (R.app phi)
      evalApply subst
      evalTactic (‚Üê `(tactic| exact $(mkIdent R_psi_hypName)))

  | instFun funNameStr expr => do instMultImpl [(funNameStr, expr)] proofstep
  | instPred predNameStr expr => do instMultImpl [(predNameStr, expr)] proofstep

  | rightEpsilon A X t => do evalTactic (‚Üê `(tactic| sorry))
  | leftEpsilon i y => do evalTactic (‚Üê `(tactic| sorry))

  -- Level 2
  | congruence => do evalTactic (‚Üê `(tactic| cc))
  | leftHyp _  => do evalTactic (‚Üê `(tactic| contradiction))

  | leftNotAnd i => do
    let hypName ‚Üê getHypName proofstep.antecedents[i]!
    evalTactic (‚Üê `(tactic| cases (Classical.not_and_iff_or_not_not.mp $(mkIdent hypName)) <;> rename_i $(mkIdent psName):ident))

  | leftNotOr i => do
    let hypName ‚Üê getHypName proofstep.antecedents[i]!
    let (hypName1, hypName2) := (Name.str psName "1", Name.str psName "2")
    evalTactic (‚Üê `(tactic| rcases (not_or.mp $(mkIdent hypName)) with ‚ü®$(mkIdent hypName1), $(mkIdent hypName2)‚ü©))

  | leftNotImplies i => do
    let hypName ‚Üê getHypName proofstep.antecedents[i]!
    trace[auto.tptp.printProof] "leftNotImplies: {hypName} {‚Üê resolveTypes proofstep.antecedents[i]!}"
    let (hypName1, hypName2) := (Name.str psName "1", Name.str psName "2")
    evalTactic (‚Üê `(tactic| rcases (not_imp.mp $(mkIdent hypName)) with ‚ü®$(mkIdent hypName1), $(mkIdent hypName2)‚ü©))

  | leftNotIff i => do
    let hypName ‚Üê getHypName proofstep.antecedents[i]!
    evalTactic (‚Üê `(tactic| have $(mkIdent psName) := $(mkIdent hypName)))
    evalTactic (‚Üê `(tactic| rw [iff_iff_implies_and_implies] at $(mkIdent psName):ident))
    evalTactic (‚Üê `(tactic| cases (Classical.not_and_iff_or_not_not.mp $(mkIdent psName)) <;> rename_i $(mkIdent psName):ident))

  | leftNotNot i =>
    let hypName ‚Üê getHypName proofstep.antecedents[i]!
    evalTactic (‚Üê `(tactic| have $(mkIdent psName) := $(mkIdent hypName)))
    evalTactic (‚Üê `(tactic| rw [Classical.not_not] at $(mkIdent psName):ident))

  | leftNotEx i t => do
    let hypName ‚Üê getHypName proofstep.antecedents[i]!
    evalTactic (‚Üê `(tactic| have $(mkIdent psName) := $(mkIdent hypName)))
    evalTactic (‚Üê `(tactic| rw [not_exists] at $(mkIdent psName):ident))
    evalSpecialize psName t

  | leftNotAll i y => do
    let hypName ‚Üê getHypName proofstep.antecedents[i]!
    evalTactic (‚Üê `(tactic| rcases (Classical.not_forall.mp $(mkIdent hypName)) with ‚ü®$(mkIdent (.str .anonymous y)), $(mkIdent psName)‚ü©))

  -- Level 3
  | rightRelIff _ => do evalTactic (‚Üê `(tactic| trivial))
  | rightSubstMulti i P vars => do evalTactic (‚Üê `(tactic| sorry))
  | leftSubstMulti i P vars => do evalTactic (‚Üê `(tactic| sorry))
  | rightSubstEqForallLocal i R Z => do evalTactic (‚Üê `(tactic| sorry))
  | rightSubstEqForall i R Z => do evalTactic (‚Üê `(tactic| sorry))
  | rightSubstIffForallLocal i R Z => do evalTactic (‚Üê `(tactic| sorry))
  | rightSubstIffForall i R Z => do evalTactic (‚Üê `(tactic| sorry))

  | rightNnf i j => do
    let hypName ‚Üê getHypName proofstep.consequents[i]! true
    let targetExpr := mkApp (mkConst ``Not) premisesProofstep[0]!.consequents[j]!
    evalTactic (‚Üê `(tactic| have $(mkIdent psName) := $(mkIdent hypName)))
    haveExpr psName targetExpr
    evalTactic (‚Üê `(tactic| push_neg; push_neg at $(mkIdent psName):ident; assumption))

  | rightPrenex i j => do
    let hypName ‚Üê getHypName proofstep.consequents[i]! true
    let targetExpr := mkApp (mkConst ``Not) premisesProofstep[0]!.consequents[j]!
    evalTactic (‚Üê `(tactic| have $(mkIdent psName) := $(mkIdent hypName)))
    haveExpr psName targetExpr
    try
      evalTactic (‚Üê `(tactic| repeat (simp -failIfUnchanged only [imp_iff_not_or, and_forall_prenex, and_exists_prenex, exists_and_prenex, forall_and_prenex, or_forall_prenex, or_exists_prenex, exists_or_prenex, forall_or_prenex] at $(mkIdent psName):ident; try push_neg at $(mkIdent psName):ident)))
      evalTactic (‚Üê `(tactic| repeat (simp -failIfUnchanged only [imp_iff_not_or, and_forall_prenex, and_exists_prenex, exists_and_prenex, forall_and_prenex, or_forall_prenex, or_exists_prenex, exists_or_prenex, forall_or_prenex]; try push_neg)))
      evalTactic (‚Üê `(tactic| assumption))
    catch e =>
      throwError "Prenex normalization failed, you are probably missing a `Nonempty` instance. Error message:\n{e.toMessageData}"

  | clausify _ => do evalTactic (‚Üê `(tactic| tauto))

  | elimIffRefl i => do
    let formula ‚Üê resolveTypes premisesProofstep[0]!.antecedents[i]!
    haveExpr psName formula
    Meta.check (‚Üê (‚Üê getMainGoal).getType)
    evalTactic (‚Üê `(tactic| apply intros; apply Iff.refl))

  | res i => do
    let formula ‚Üê resolveTypes (mkApp (mkConst ``Not) premisesProofstep[0]!.consequents[i]!)
    haveExpr psName formula
    Meta.check (‚Üê (‚Üê getMainGoal).getType)
    evalTactic (‚Üê `(tactic| apply Classical.byContradiction; intro $(mkIdent psName):ident))

  | instMult args => do instMultImpl args proofstep



partial def reconstructProof (proofsteps : Array Parser.TPTP.ProofStep)
  (proofStepNameToIndex : Std.HashMap String Nat)
: TacticM Unit := do
  if proofsteps.size != 0 then
    let proofstep := proofsteps[proofsteps.size - 1]!
    let premises := proofstep.premises.map (fun i => proofStepNameToIndex.get! i)
    let premisesProofstep := premises.map (fun i => proofsteps[i]!)
    trace[auto.tptp.printProof] "Current context:\n{‚Üê getLocalContextStr}"
    trace[auto.tptp.printProof] s!"{‚Üê proofstep.prettyPrint}"
    try
      applyProofStep proofstep premisesProofstep.toArray
    catch e =>
      throwError "Error reconstructing proof at step {proofstep.name}: {e.toMessageData}"
    for premise in premises do
      reconstructProof (proofsteps.toSubarray 0 (premise+1)) proofStepNameToIndex

open Embedding.Lam in
def queryTPTPEgg (exportFacts : Array REntry) : LamReif.ReifM (Array Parser.TPTP.ProofStep) := do
  let lamVarTy := (‚Üê LamReif.getVarVal).map Prod.snd
  let lamEVarTy ‚Üê LamReif.getLamEVarTy
  let exportLamTerms ‚Üê exportFacts.mapM (fun re => do
    match re with
    | .valid [] t => return t
    | _ => throwError "{decl_name%} :: Unexpected error")
  let query ‚Üê if (auto.mono.mode.get (‚Üê getOptions)) == MonoMode.fol then
    lam2FOF lamVarTy lamEVarTy exportLamTerms
  else
    lam2TH0 lamVarTy lamEVarTy exportLamTerms
  trace[auto.tptp.printQuery] "\n{query}"
  let (proven, tptpProof) ‚Üê Solver.TPTP.queryEggSolver query
  if proven then
    try
      let proofSteps ‚Üê Parser.TPTP.getSCTPTPProof tptpProof
      return proofSteps
    catch e =>
      throwError "Egg found a proof, but proof reification failed with {e.toMessageData}"
  else
    throwError "Egg failed to find proof"

/--
  Run `auto`'s monomorphization and preprocessing, then send the problem to Egg solver
-/
def runEgg
  (lemmas : Array Lemma) (inhFacts : Array Lemma) : MetaM (Array Parser.TPTP.ProofStep) :=
  withDefault do
    traceLemmas `auto.runAuto.printLemmas s!"All lemmas received by {decl_name%}:" lemmas
    let lemmas ‚Üê rewriteIteCondDecide lemmas
    let (proofsteps, _) ‚Üê Monomorphization.monomorphize lemmas inhFacts (@id (Reif.ReifM (Array Parser.TPTP.ProofStep)) do
      let s ‚Üê get
      let u ‚Üê computeMaxLevel s.facts
      (reifMAction s.facts s.inhTys s.inds).run' {u := u})
    return proofsteps
where
  reifMAction
    (uvalids : Array UMonoFact) (uinhs : Array UMonoFact)
    (minds : Array (Array SimpleIndVal)) : LamReif.ReifM (Array Parser.TPTP.ProofStep) := do
    let exportFacts ‚Üê LamReif.reifFacts uvalids
    let mut exportFacts := exportFacts.map (Embedding.Lam.REntry.valid [])
    let _ ‚Üê LamReif.reifInhabitations uinhs
    LamReif.printValuation
    -- **TPTP invocation and Premise Selection**
    if auto.tptp.get (‚Üê getOptions) then
      let proofsteps ‚Üê queryTPTPEgg exportFacts
      return proofsteps
    throwError "auto.tptp is not enabled"

@[tactic egg]
def evalEgg : Tactic
| `(egg | egg $instr $hints $[$uords]*) => withMainContext do
  let goal ‚Üê getMainGoal
  let currentGoalName := `_currentGoalName
  liftMetaTactic fun g => do
    let [newG] ‚Üê g.apply (.const ``Classical.byContradiction [])
      | throwError "{decl_name%} :: Too many arguments"
    let newG ‚Üê newG.introN 1 [currentGoalName]
    return [newG.2]

  let instr ‚Üê parseInstr instr
  match instr with
  | .none => withMainContext do
    let (lemmas, inhFacts) ‚Üê collectAllLemmas hints uords #[FVarId.mk `_currentGoalName]
    let proofsteps ‚Üê runEgg lemmas inhFacts

    try
      let mut proofStepNameToIndex : Std.HashMap String Nat := Std.HashMap.empty
      for (proofstep, i) in proofsteps.zipWithIndex do
        proofStepNameToIndex := proofStepNameToIndex.insert proofstep.name i
      trace[auto.tptp.printProof] "###########################################"
      trace[auto.tptp.printProof] "Proof steps (backward):"
      reconstructProof proofsteps proofStepNameToIndex
    catch e =>
      throwError "Egg found a proof, but reconstruction failed with:\n{e.toMessageData}"

    -- TODO: handle unassigned metavariables

  | .useSorry =>
    let proof ‚Üê mkAppM ``sorryAx #[Expr.const ``False [], Expr.const ``false []]
    goal.assign proof
| _ => throwUnsupportedSyntax


open Embedding.Lam in
def queryTPTPGoeland (exportFacts : Array REntry) : LamReif.ReifM (Array Parser.TPTP.ProofStep) := do
  let lamVarTy := (‚Üê LamReif.getVarVal).map Prod.snd
  let lamEVarTy ‚Üê LamReif.getLamEVarTy
  let exportLamTerms ‚Üê exportFacts.mapM (fun re => do
    match re with
    | .valid [] t => return t
    | _ => throwError "{decl_name%} :: Unexpected error")
  let query ‚Üê if (auto.mono.mode.get (‚Üê getOptions)) == MonoMode.fol then
    lam2FOF lamVarTy lamEVarTy exportLamTerms
  else
    lam2TH0 lamVarTy lamEVarTy exportLamTerms
  trace[auto.tptp.printQuery] "\n{query}"
  let (proven, tptpProof) ‚Üê Solver.TPTP.queryGoelandSolver query
  if proven then
    try
      let proofSteps ‚Üê Parser.TPTP.getSCTPTPProof tptpProof
      return proofSteps
    catch e =>
      throwError "Goeland found a proof, but proof reification failed with {e.toMessageData}"
  else
    throwError "Goeland failed to find proof"

/--
  Run `auto`'s monomorphization and preprocessing, then send the problem to Goeland solver
-/
def runGoeland
  (lemmas : Array Lemma) (inhFacts : Array Lemma) : MetaM (Array Parser.TPTP.ProofStep) :=
  withDefault do
    traceLemmas `auto.runAuto.printLemmas s!"All lemmas received by {decl_name%}:" lemmas
    let lemmas ‚Üê rewriteIteCondDecide lemmas
    let (proofsteps, _) ‚Üê Monomorphization.monomorphize lemmas inhFacts (@id (Reif.ReifM (Array Parser.TPTP.ProofStep)) do
      let s ‚Üê get
      let u ‚Üê computeMaxLevel s.facts
      (reifMAction s.facts s.inhTys s.inds).run' {u := u})
    return proofsteps
where
  reifMAction
    (uvalids : Array UMonoFact) (uinhs : Array UMonoFact)
    (minds : Array (Array SimpleIndVal)) : LamReif.ReifM (Array Parser.TPTP.ProofStep) := do
    let exportFacts ‚Üê LamReif.reifFacts uvalids
    let mut exportFacts := exportFacts.map (Embedding.Lam.REntry.valid [])
    let _ ‚Üê LamReif.reifInhabitations uinhs
    LamReif.printValuation
    -- **TPTP invocation and Premise Selection**
    if auto.tptp.get (‚Üê getOptions) then
      let proofsteps ‚Üê queryTPTPGoeland exportFacts
      return proofsteps
    throwError "auto.tptp is not enabled"

@[tactic goeland]
def evalGoeland : Tactic
| `(goeland | goeland $instr $hints $[$uords]*) => withMainContext do
  let goal ‚Üê getMainGoal
  let currentGoalName := `_currentGoalName
  liftMetaTactic fun g => do
    let [newG] ‚Üê g.apply (.const ``Classical.byContradiction [])
      | throwError "{decl_name%} :: Too many arguments"
    let newG ‚Üê newG.introN 1 [currentGoalName]
    return [newG.2]

  let instr ‚Üê parseInstr instr
  match instr with
  | .none => withMainContext do
    let (lemmas, inhFacts) ‚Üê collectAllLemmas hints uords #[FVarId.mk `_currentGoalName]
    let proofsteps ‚Üê runGoeland lemmas inhFacts

    try
      let mut proofStepNameToIndex : Std.HashMap String Nat := Std.HashMap.empty
      for (proofstep, i) in proofsteps.zipWithIndex do
        proofStepNameToIndex := proofStepNameToIndex.insert proofstep.name i
      trace[auto.tptp.printProof] "###########################################"
      trace[auto.tptp.printProof] "Proof steps (backward):"
      reconstructProof proofsteps proofStepNameToIndex
    catch e =>
      throwError "Goeland found a proof, but reconstruction failed with:\n{e.toMessageData}"
  | .useSorry =>
    let proof ‚Üê mkAppM ``sorryAx #[Expr.const ``False [], Expr.const ``false []]
    goal.assign proof
| _ => throwUnsupportedSyntax


end Auto


set_option auto.tptp true
set_option auto.tptp.egg.path "/home/poiroux/Documents/EPFL/PhD/Lean/lean-auto/egg-sc-tptp"
set_option auto.tptp.goeland.path "/home/poiroux/Documents/EPFL/PhD/Lean/lean-auto/goeland_linux_release"
set_option auto.mono.mode "fol"

set_option trace.auto.tptp.printQuery true
set_option trace.auto.tptp.printProof true
set_option trace.auto.tptp.result true
set_option trace.auto.lamReif.printValuation true

-- set_option pp.explicit true
-- set_option pp.mvars true
-- set_option pp.funBinderTypes true
-- set_option pp.all true
-- set_option pp.piBinderTypes true
-- set_option pp.letVarTypes true
-- set_option pp.mvars.withType true

-- # Known issues
-- Shadowing hypothesis names
  -- example (Œ± : Type) (a b : Œ±)
  --   (h : ‚àÄ y : Œ±, y = a)
  --   (h : ‚àÄ y : Nat, y = y) :
  --   a = b := by
  --   egg

-- Exporting hypotheses not suppported by the solver
  -- example (Œ± : Type) (a b : Œ±)
  --   (h : ‚àÄ y : Œ±, y = a)
  --   (h : ‚àÉ y : Nat, y = y) :
  --   a = b := by
  --   egg

-- Useless variable create placeholder synthesis issue
  -- example (Œ± : Type) (sf : Œ± -> Œ±) (cemptySet : Œ±)
  --   (h1 : ‚àÄ x, x = sf (sf (sf x)))
  --   (h2 : ‚àÄ x, (‚àÄ y : Œ±, x = sf (sf x))) :
  --   cemptySet = sf cemptySet := by
  --   egg

example : A ‚Üî A := by
  egg

example : A = A := by
  egg

example (Œ± : Type) (a b : Œ±)
  (h1 : a = b) :
  a = b := by
  egg

example (Œ± : Type) (a b : Œ±)
  (h1 : a = b) :
  b = a := by
  egg

example (Œ± : Type) (a b : Œ±)
  (h : ‚àÄ y : Œ±, y = a) :
  a = b := by
  egg

example (Œ± : Type) (a b c d e : Œ±)
  (h1 : a = b)
  (h2 : b = c)
  (h3 : c = d)
  (h4 : d = e) :
  a = e := by
  egg

example (Œ± : Type) (f : Œ± -> Œ±) (a : Œ±)
  (h1 : a = (fun x => f x) a) :
  a = f a := by
  egg

example (f : Prop -> Prop) (a : Prop)
  (h1 : a ‚Üî (fun x => f x) a) :
  a ‚Üî f a := by
  egg

example (f : Prop -> Prop) (a : Prop)
  (h1 : a ‚Üî (fun x => f x) a) :
  f a ‚Üî a := by
  egg

example (Œ± : Type) (f : Œ± -> Œ±) (a : Œ±)
  (h1 : ‚àÄ x, x = (f (f (f ( f x)))))
  (h2 : a =  f (f (f (f ( f a))))) :
  a = f a := by
  egg

example (Œ± : Type) (f : Œ± -> Œ±) (a : Œ±)
  -- (h : ‚àÉ y : Nat, y = y)
  (h1 : ‚àÄ x, (f (f (f ( f x)))) = x)
  (h2 : a =  f (f (f (f ( f a))))) :
  a = f a := by
  egg

theorem saturation (Œ± : Type) (sf : Œ± -> Œ±) (cemptySet : Œ±)
  -- (h : ‚àÉ y : Nat, y = y)
  (h1 : ‚àÄ x, x = sf (sf (sf x)))
  (h2 : ‚àÄ x, (‚àÄ y : Œ±, x = sf (sf x))) :
  cemptySet = sf cemptySet := by
  egg

theorem testiff (Œ± : Type) (p : Œ± -> Prop) (sf : Œ± -> Œ±) (cemptySet : Œ±)
  (h1 : ‚àÄ x, p x ‚Üî p (sf (sf (sf (sf (sf (sf (sf (sf x)))))))))
  (h2 : ‚àÄ x, p x ‚Üî p (sf (sf (sf (sf (sf x)))))) :
  p (sf cemptySet) ‚Üî p cemptySet := by
  egg

example (Œ± : Type) (p : Œ± -> Prop) (sf : Œ± -> Œ±) (cemptySet : Œ±)
  (h1 : ‚àÄ x, p x = p (sf (sf (sf (sf (sf (sf (sf (sf x)))))))))
  (h2 : ‚àÄ x, p x = p (sf (sf (sf (sf (sf x)))))) :
  p (sf cemptySet) = p cemptySet := by
  egg

example (Œ± : Type) (sf : Œ± -> Œ±)
  (h1 : ‚àÄ x, x = sf (sf (sf x)))
  (h2 : ‚àÄ x, x = sf (sf x)) :
  ‚àÄ x, x = sf x := by
  intro x
  egg

example (Œ± : Type) (f : Œ± -> Œ±) (a : Œ±)
  (h1 : ‚àÄ x, x = (f (f (f ( f x)))))
  (h2 : a =  f (f (f (f ( f a))))) :
  f a = a := by
  egg

example (Œ± : Type) (d : Œ± ‚Üí Prop) : ‚àÉ y : Œ±, ‚àÄ x : Œ±, (d x ‚Üí d y) := by
  goeland

theorem buveurs (Œ± : Type) [Nonempty Œ±] (P : Œ± ‚Üí Prop) : ‚àÉ x, (P x ‚Üí ‚àÄ y, P y) := by
  goeland

example (Œ± : Type) (f : Œ± -> Œ±) (a : Œ±)
  (h1 : ‚àÄ x, x = (f (f (f ( f x)))))
  (h2 : a =  f (f (f (f ( f a))))) :
  f a = a := by
  goeland
